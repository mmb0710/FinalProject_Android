// Generated by view binder compiler. Do not edit!
package http://schemas.android.com/apk/res-auto.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.flexbox.FlexboxLayout;
import http://schemas.android.com/apk/res-auto.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ResultItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final FlexboxLayout flSynonyms;

  @NonNull
  public final LinearLayout llExamples;

  @NonNull
  public final AppCompatTextView tvDefinition;

  @NonNull
  public final AppCompatTextView tvPartOfSpeech;

  private ResultItemBinding(@NonNull LinearLayout rootView, @NonNull FlexboxLayout flSynonyms,
      @NonNull LinearLayout llExamples, @NonNull AppCompatTextView tvDefinition,
      @NonNull AppCompatTextView tvPartOfSpeech) {
    this.rootView = rootView;
    this.flSynonyms = flSynonyms;
    this.llExamples = llExamples;
    this.tvDefinition = tvDefinition;
    this.tvPartOfSpeech = tvPartOfSpeech;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ResultItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ResultItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.result_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ResultItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.fl_synonyms;
      FlexboxLayout flSynonyms = ViewBindings.findChildViewById(rootView, id);
      if (flSynonyms == null) {
        break missingId;
      }

      id = R.id.ll_examples;
      LinearLayout llExamples = ViewBindings.findChildViewById(rootView, id);
      if (llExamples == null) {
        break missingId;
      }

      id = R.id.tv_definition;
      AppCompatTextView tvDefinition = ViewBindings.findChildViewById(rootView, id);
      if (tvDefinition == null) {
        break missingId;
      }

      id = R.id.tv_partOfSpeech;
      AppCompatTextView tvPartOfSpeech = ViewBindings.findChildViewById(rootView, id);
      if (tvPartOfSpeech == null) {
        break missingId;
      }

      return new ResultItemBinding((LinearLayout) rootView, flSynonyms, llExamples, tvDefinition,
          tvPartOfSpeech);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
